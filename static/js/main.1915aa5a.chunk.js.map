{"version":3,"sources":["services/soundCloudService.js","services/localstorageService.js","store/actions/appActions.js","components/tracks/TrackPreview.jsx","components/tracks/TracksList.jsx","components/tracks/ListControllers.jsx","components/tracks/SearchBar.jsx","components/tracks/TracksDashboard.jsx","components/track-player/TrackPlayer.jsx","components/recent-searches/RecentSearchPreview.jsx","components/recent-searches/RecentSearchList.jsx","components/recent-searches/RecentSearches.jsx","pages/SoundCloudMain.jsx","App.js","history.js","store/reducers/appReducer.js","store/reducers/index.js","store/store.js","serviceWorker.js","index.js"],"names":["query","a","searchBy","tracksPerPage","offset","SC","get","q","limit","res","initialize","client_id","getTracks","saveToStorage","key","val","localStorage","setItem","JSON","stringify","loadFromStorage","getItem","parse","setIsLoading","status","dispatch","type","updateQuery","updatedQuery","Promise","resolve","updateRecentSearches","searches","length","pop","localstorageService","updateReadRecentSearch","soundCloudService","data","_setTracks","console","log","TrackPreview","track","chooseTrack","titleLimit","currPlayingId","elImg","previewMode","useRef","imgUrl","artwork_url","titleToDisplay","title","slice","titleClassName","id","onClick","startTransitionsPos","top","current","y","left","x","className","ref","src","alt","user","username","TracksList","tracks","map","ListControllers","changePage","changePreviewMode","nextBtnClassName","prevBtnClassName","SearchBar","clearRecentSearch","handleChange","inputVal","submitSearch","isLoading","useSelector","state","appStore","onSubmit","placeholder","value","onChange","onFocus","CircularProgress","color","hidden","TracksDashboard","useDispatch","currTrack","recentSearches","readRecentSearch","centerImgPos","useState","setInputVal","setPreviewMode","imgTransition","setImgTransition","useEffect","userPreviewMode","localStorageService","e","preventDefault","newQuery","trim","filter","searchItem","newRecentSearches","unshift","changeTo","newPage","input","target","trackId","startTransitionPos","transitionParams","opacity","setTimeout","trackToSet","trackIdx","findIndex","mode","style","TrackPlayer","imgWrapper","initialMount","setInitialMount","playerReset","setPlayerReset","currTrackId","setCurrTrackId","setTransisionParams","offsetTop","clientHeight","offsetLeft","clientWidth","params","updateCenterImgPos","audio_id","toString","auto_play","RecentSearchPreview","selectSearch","RecentSearchList","idx","RecentSearches","searchVal","FunctionComponent","App","component","SoundCloudMain","exact","path","createBrowserHistory","initialState","rootReducer","combineReducers","action","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1915aa5a.chunk.js","sourcesContent":["import SC from 'soundcloud';\r\n\r\nSC.initialize({\r\n    client_id: 'ggX0UomnLs0VmW7qZnCzw'\r\n});\r\n\r\nasync function getTracks(query) {\r\n\r\n    const { searchBy, tracksPerPage, offset } = query;\r\n\r\n    const res = await SC.get('/tracks', {\r\n        q: searchBy,\r\n        limit: tracksPerPage,\r\n        offset\r\n    });\r\n    return res;\r\n};\r\n\r\nexport default {\r\n    getTracks\r\n}","export default {\r\n    saveToStorage,\r\n    loadFromStorage\r\n};\r\n\r\nfunction saveToStorage(key, val) {\r\n    localStorage.setItem(key, JSON.stringify(val));\r\n};\r\n\r\nfunction loadFromStorage(key) {\r\n    const val = localStorage.getItem(key);\r\n    return JSON.parse(val);\r\n};","import soundCloudService from '../../services/soundCloudService.js'\r\nimport localstorageService from '../../services/localstorageService.js'\r\n\r\n\r\nexport function setIsLoading(status) {\r\n    return (dispatch) => {\r\n        dispatch({ type: 'SET-IS-LOADING', status });\r\n    };\r\n}\r\n\r\nexport function updateCenterImgPos(params) {\r\n    return (dispatch) => {\r\n        dispatch({ type: 'UPDATE-CENTER-IMG-POS', params });\r\n    };\r\n}\r\n\r\nexport function updateQuery(updatedQuery) {\r\n    return (dispatch) => {\r\n        dispatch({ type: 'UPDATE-QUERY', updatedQuery });\r\n        return Promise.resolve();\r\n    };\r\n}\r\n\r\nexport function clearTracks() {\r\n    return (dispatch) => {\r\n        dispatch({ type: 'CLEAR-TRACKS' });\r\n        return Promise.resolve();\r\n    };\r\n}\r\n\r\nexport function setCurrTrack(trackToSet) {\r\n    return (dispatch) => {\r\n        dispatch({ type: 'SET-CURR-TRACK', trackToSet });\r\n        return Promise.resolve();\r\n    };\r\n}\r\n\r\nexport function clearCurrTrack() {\r\n    return (dispatch) => {\r\n        dispatch({ type: 'CLEAR-CURR-TRACK' });\r\n        return Promise.resolve();\r\n    };\r\n}\r\n\r\nexport function getRecentSearches() {\r\n    return (dispatch) => {\r\n        const searches = localstorageService.loadFromStorage('user-searches')\r\n        if (!searches) return;\r\n        dispatch({ type: 'UPDATE-RECENT_SEARCHES', searches });\r\n        return Promise.resolve(searches);\r\n    };\r\n}\r\n\r\nexport function updateRecentSearches(searches) {\r\n    return (dispatch) => {\r\n        if (searches.length > 5) searches.pop();\r\n        localstorageService.saveToStorage('user-searches', searches);\r\n        dispatch({ type: 'UPDATE-RECENT_SEARCHES', searches });\r\n        return Promise.resolve();\r\n    };\r\n}\r\n\r\nexport function clearRecentSearches() {\r\n    return (dispatch) => {\r\n        localstorageService.saveToStorage('user-searches', []);\r\n        dispatch({ type: 'CLEAR-RECENT-SEARCHES' });\r\n        return Promise.resolve();\r\n    };\r\n}\r\n\r\nexport function updateReadRecentSearch(val) {\r\n    return (dispatch) => {\r\n        dispatch({ type: 'UPDATE-IS-RECENT-SEARCH', val });\r\n        return Promise.resolve();\r\n    };\r\n}\r\n\r\n// async actions\r\n\r\n\r\nexport function getTracks(query) {\r\n\r\n    return async dispatch => {\r\n        try {\r\n            const data = await soundCloudService.getTracks(query);\r\n            dispatch(_setTracks(data));\r\n        }\r\n        catch (err) {\r\n            console.log('Could not retrieve Soundcloud data:', err)\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Action Creators\r\n\r\nfunction _setTracks(data) {\r\n    return {\r\n        type: 'SET-TRACKS',\r\n        data\r\n    }\r\n}","import React, { useRef } from 'react';\r\n\r\nexport default function TrackPreview({ track, chooseTrack, titleLimit, currPlayingId, previewMode }) {\r\n\r\n    const elImg = useRef();\r\n\r\n    const imgUrl = track.artwork_url ? track.artwork_url : '../../assets/missing-image.jpg'\r\n\r\n    const titleToDisplay = (track.title.length < titleLimit) ? track.title : track.title.slice(0, titleLimit) + '...';\r\n    const titleClassName = currPlayingId !== track.id ? '' : 'highlight';\r\n\r\n    const onChooseTrack = () => {\r\n        const startTransitionsPos = {\r\n            top: elImg.current.y,\r\n            left: elImg.current.x,\r\n        }\r\n        chooseTrack(track.id, track.artwork_url, startTransitionsPos)\r\n    }\r\n\r\n    return (\r\n            <section onClick={onChooseTrack} className=\"track-list-item flex align-center\">\r\n\r\n                <div className=\"img-wrapper\">\r\n                    <img ref={elImg} src={imgUrl} alt=\"\" />\r\n                </div>\r\n\r\n                <div className=\"details flex column align-flex-start justify-between\">\r\n                    <h4 className={titleClassName}>{titleToDisplay}</h4>\r\n                    <p>{track.user.username}</p>\r\n                </div>\r\n                \r\n            </section>\r\n    );\r\n}","import React from 'react';\r\n\r\nimport TrackPreview from './TrackPreview'\r\n\r\nexport default function TracksList({ tracks, chooseTrack, previewMode, currPlayingId }) {\r\n\r\n    const titleLimit = previewMode === 'list' ? 60 : 75;\r\n\r\n    return (\r\n        <section className={`tracks-list ${previewMode}`}>\r\n            {tracks.map(track => <TrackPreview\r\n                key={track.id}\r\n                chooseTrack={chooseTrack}\r\n                track={track}\r\n                currPlayingId={currPlayingId}\r\n                titleLimit={titleLimit}\r\n                previewMode={previewMode}\r\n            />)}\r\n        </section>\r\n    );\r\n}","import React from 'react';\r\n\r\nimport ListIcon from '@material-ui/icons/List';\r\nimport ViewModuleIcon from '@material-ui/icons/ViewModule';\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\r\n\r\nexport default function ListControllers({ changePage, changePreviewMode, offset, previewMode, tracks }) {\r\n\r\n    const nextBtnClassName = tracks.length !== 0 ? '' : 'mute';\r\n    const prevBtnClassName = offset !== 0 ? '' : 'mute';\r\n\r\n    return (\r\n        <section className=\"list-controllers flex justify-between align-center\">\r\n            <section className=\"paging-btns-container flex align-center\">\r\n                <button className={`paging-btn ${prevBtnClassName}`} onClick={() => { changePage('prev') }} ><ArrowBackIosIcon /></button>\r\n                <button className={`paging-btn ${nextBtnClassName}`} onClick={() => { changePage('next') }} ><ArrowForwardIosIcon /></button>\r\n            </section>\r\n            <div className=\"preview-mode-btns-container flex align-center\">\r\n                <div className={`list-btn ${previewMode === 'tile' ? 'mute' : ''}`}>\r\n                    <ListIcon onClick={() => { changePreviewMode('list') }} />\r\n                </div>\r\n                <div className={`tile-btn ${previewMode === 'list' ? 'mute' : ''}`}>\r\n                    <ViewModuleIcon onClick={() => { changePreviewMode('tile') }} />\r\n                </div>\r\n            </div>\r\n        </section>\r\n    );\r\n}","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nexport default function SearchBar({ clearRecentSearch, handleChange, inputVal, submitSearch }) {\r\n\r\n    const isLoading = useSelector(state => state.appStore.isLoading);\r\n\r\n    return (\r\n        <form className=\"seach-bar flex align-center justify-between\" onSubmit={submitSearch}>\r\n\r\n            <input className=\"search-input\"\r\n                type=\"text\"\r\n                placeholder=\"Play something\"\r\n                value={inputVal}\r\n                onChange={handleChange}\r\n                onFocus={clearRecentSearch} />\r\n            <div className=\"search-btn-wrapper flex align-center justify-center\">\r\n                {!isLoading && <SearchIcon onClick={submitSearch} className=\"search-icn\" />}\r\n                {isLoading && <CircularProgress color=\"primary\" className=\"search-icn\" />}\r\n            </div>\r\n\r\n            <button hidden></button>\r\n        </form>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { setIsLoading, getTracks, updateQuery, clearTracks, setCurrTrack, updateReadRecentSearch, updateRecentSearches } from '../../store/actions/appActions';\r\n\r\nimport localStorageService from '../../services/localstorageService.js'\r\n\r\nimport TracksList from './TracksList';\r\nimport ListControllers from './ListControllers';\r\nimport SearchBar from './SearchBar';\r\n\r\nexport default function TracksDashboard() {\r\n\r\n    const dispatch = useDispatch();\r\n    const tracks = useSelector(state => state.appStore.tracks);\r\n    const currTrack = useSelector(state => state.appStore.currTrack);\r\n    const query = useSelector(state => state.appStore.query);\r\n    const recentSearches = useSelector(state => state.appStore.recentSearches);\r\n    const readRecentSearch = useSelector(state => state.appStore.readRecentSearch);\r\n    const centerImgPos = useSelector(state => state.appStore.centerImgPos);\r\n\r\n    const [inputVal, setInputVal] = useState('');\r\n    const [previewMode, setPreviewMode] = useState('list');\r\n    const [imgTransition, setImgTransition] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const userPreviewMode = localStorageService.loadFromStorage('user-preview-mode')\r\n        if (userPreviewMode) setPreviewMode(userPreviewMode)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (readRecentSearch) setInputVal(query.searchBy)\r\n    })\r\n\r\n    const clearRecentSearch = () => {\r\n        dispatch(updateReadRecentSearch(false));\r\n    }\r\n\r\n    const handleChange = (e) => {\r\n        const input = e.target.value;\r\n        setInputVal(input);\r\n    };\r\n\r\n    const submitSearch = async (e) => {\r\n        e.preventDefault();\r\n\r\n        let newQuery = { ...query };\r\n        newQuery.searchBy = inputVal;\r\n        newQuery.offset = 0;\r\n\r\n        if (inputVal.trim() === '') {\r\n            dispatch(clearTracks())\r\n            newQuery.offset = 0\r\n            dispatch(updateQuery(newQuery));\r\n            return\r\n        };\r\n\r\n        dispatch(updateQuery(newQuery));\r\n        dispatch(setIsLoading(true));\r\n        await dispatch(getTracks(newQuery));\r\n        dispatch(setIsLoading(false));\r\n\r\n        const matchingSearches = recentSearches.filter(searchItem => searchItem === inputVal)\r\n\r\n        if (matchingSearches.length > 0) return;\r\n\r\n        let newRecentSearches = [...recentSearches];\r\n        newRecentSearches.unshift(inputVal);\r\n        dispatch(updateRecentSearches(newRecentSearches));\r\n    };\r\n\r\n    const changePage = async (changeTo) => {\r\n\r\n        if (tracks.length === 0) return;\r\n\r\n        let newPage;\r\n        if (changeTo === 'next') {\r\n            newPage = query.offset + query.tracksPerPage\r\n        } else {\r\n            if (query.offset === 0) return\r\n            newPage = query.offset - query.tracksPerPage\r\n        };\r\n\r\n        let newQuery = { ...query };\r\n        newQuery.offset = newPage;\r\n\r\n        dispatch(updateQuery(newQuery));\r\n\r\n        dispatch(setIsLoading(true));\r\n        await dispatch(getTracks(newQuery));\r\n        dispatch(setIsLoading(false));\r\n    };\r\n\r\n    const changePreviewMode = (mode) => {\r\n        setPreviewMode(mode)\r\n        localStorageService.saveToStorage('user-preview-mode', mode)\r\n    };\r\n\r\n    const chooseTrack = (trackId, imgUrl, startTransitionPos) => {\r\n\r\n        if (currTrack) {\r\n            if (trackId === currTrack.id) return\r\n        }\r\n        \r\n        let transitionParams = {\r\n            imgUrl,\r\n            opacity: 1,\r\n            startTransitionPos\r\n        }\r\n        setImgTransition(transitionParams)\r\n        console.log(transitionParams)\r\n        setTimeout(() => {\r\n            transitionParams = {\r\n                imgUrl,\r\n                opacity: 0,\r\n                startTransitionPos: centerImgPos\r\n            }\r\n            setImgTransition(transitionParams)\r\n        }, 0)\r\n        setTimeout(() => {\r\n            setImgTransition(null)\r\n            const trackIdx = tracks.findIndex(track => track.id === trackId);\r\n            dispatch(setCurrTrack(tracks[trackIdx]))\r\n        }, 500)\r\n    };\r\n\r\n    return (\r\n        <main>\r\n            <section className=\"tracks-dashboard-container\">\r\n                <SearchBar inputVal={inputVal}\r\n                    handleChange={handleChange}\r\n                    clearRecentSearch={clearRecentSearch}\r\n                    submitSearch={submitSearch} />\r\n\r\n                <section className=\"tracks-list-container\">\r\n                    {tracks.length > 0 && <TracksList tracks={tracks}\r\n                        currPlayingId={currTrack ? currTrack.id : ''}\r\n                        chooseTrack={chooseTrack}\r\n                        previewMode={previewMode}\r\n                    />}\r\n                </section>\r\n\r\n                <ListControllers\r\n                    changePage={changePage}\r\n                    changePreviewMode={changePreviewMode}\r\n                    offset={query.offset}\r\n                    previewMode={previewMode}\r\n                    tracks={tracks}\r\n                />\r\n            </section>\r\n            {imgTransition &&\r\n                <div style={{\r\n                    top: imgTransition.startTransitionPos.top,\r\n                    left: imgTransition.startTransitionPos.left,\r\n                }} className=\"img-transition\">\r\n                    <img style={{opacity: imgTransition.opacity}} className={previewMode} src={imgTransition.imgUrl} alt=\"\" />\r\n                </div>\r\n            }\r\n        </main>\r\n    );\r\n};","import React, { useEffect, useRef, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { updateCenterImgPos } from '../../store/actions/appActions';\r\nimport Player from 'react-soundcloud-player'\r\n\r\nexport default function TrackPlayer() {\r\n\r\n    const dispatch = useDispatch();\r\n    const currTrack = useSelector(state => state.appStore.currTrack);\r\n    const imgWrapper = useRef()\r\n    const [initialMount, setInitialMount] = useState(false)\r\n    const [playerReset, setPlayerReset] = useState(false)\r\n    const [currTrackId, setCurrTrackId] = useState('')\r\n\r\n    useEffect(() => {\r\n        if (!initialMount) {\r\n            setTransisionParams()\r\n            setInitialMount(true)\r\n        };\r\n        if (currTrack && !currTrackId) {\r\n            setCurrTrackId(currTrack.id)\r\n        };\r\n        if (currTrack && currTrackId) {\r\n            if (currTrack.id !== currTrackId) {\r\n                console.log('change')\r\n                setCurrTrackId(currTrack.id)\r\n                setPlayerReset(true)\r\n                setTimeout(() => {\r\n                    setPlayerReset(false)\r\n                }, 0)\r\n            }\r\n        }\r\n    })\r\n\r\n    const setTransisionParams = () => {\r\n        const top = imgWrapper.current.offsetTop + (imgWrapper.current.clientHeight / 2)\r\n        const left = imgWrapper.current.offsetLeft + (imgWrapper.current.clientWidth / 2)\r\n        const params = {\r\n            top,\r\n            left\r\n        }\r\n        dispatch(updateCenterImgPos(params))\r\n    }\r\n\r\n    return (\r\n        <main className=\"track-player-container flex column align-center justify-between\">\r\n            <div ref={imgWrapper} className=\"img-wrapper flex align-center justify-center\">\r\n                {!currTrack && <img src=\"../../assets/record-player.png\" alt=\"\" />}\r\n                {currTrack && <img className=\"track-img\" src={currTrack.artwork_url} alt=\"\" />}\r\n            </div>\r\n\r\n            {currTrack && <h2>{currTrack.title}</h2>}\r\n            {currTrack && <p>By: {currTrack.user.username}</p>}\r\n            {currTrack && !playerReset && <Player\r\n                client_id=\"ggX0UomnLs0VmW7qZnCzw\"\r\n                audio_id={currTrack.id.toString()}\r\n                auto_play={true}\r\n                title={currTrack.title}\r\n            />}\r\n        </main>\r\n    );\r\n};\r\n","import React from 'react';\r\n\r\nexport default function RecentSearchPreview({ searchItem, selectSearch }) {\r\n\r\n    return (\r\n        <div className=\"recent-search-preview\">\r\n            <button onClick={() => { selectSearch(searchItem) }}>{searchItem}</button>\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\n\r\nimport RecentSearchPreview from './RecentSearchPreview'\r\n\r\nexport default function RecentSearchList({ searches, selectSearch }) {\r\n\r\n\r\n    return (\r\n        <section className=\"recent-search-list flex column\">\r\n            {searches.map((searchItem, idx) => <RecentSearchPreview key={idx} searchItem={searchItem} selectSearch={selectSearch}/>)}\r\n        </section>\r\n    );\r\n};","import React, { useEffect } from 'react';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setIsLoading, getRecentSearches, clearRecentSearches, updateReadRecentSearch, updateQuery, getTracks } from '../../store/actions/appActions';\r\n\r\n\r\nimport RecentSearchList from './RecentSearchList'\r\n\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nexport default function RecentSearches() {\r\n\r\n    const dispatch = useDispatch();\r\n    const recentSearches = useSelector(state => state.appStore.recentSearches);\r\n    const query = useSelector(state => state.appStore.query);\r\n\r\n    useEffect(() => {\r\n        dispatch(getRecentSearches())\r\n    }, [])\r\n\r\n    const selectSearch = async (searchVal) => {\r\n\r\n        let newQuery = { ...query };\r\n        newQuery.searchBy = searchVal;\r\n        newQuery.offset = 0;\r\n\r\n        dispatch(updateQuery(newQuery));\r\n        dispatch(setIsLoading(true));\r\n        await dispatch(getTracks(newQuery));\r\n        dispatch(setIsLoading(false));\r\n        dispatch(updateReadRecentSearch(true))\r\n    };\r\n\r\n    return (\r\n        <main className=\"recent-searches-container\">\r\n            <div className=\"header flex align-center justify-center\">\r\n                <h3>Recent Searches</h3>\r\n            </div>\r\n            {recentSearches.length > 0 && <RecentSearchList searches={recentSearches} selectSearch={selectSearch} />}\r\n            <div className={`delete-icn-wrapper flex align-center justify-flex-end ${recentSearches.length > 0 ? 'unmute' : 'mute'}`}>\r\n                <DeleteIcon onClick={() => {dispatch(clearRecentSearches())}}/>\r\n            </div>\r\n        </main>\r\n    );\r\n};","import React from 'react';\r\n\r\nimport TracksDashboard from '../components/tracks/TracksDashboard';\r\nimport TrackPlayer from '../components/track-player/TrackPlayer';\r\nimport RecentSearches from '../components/recent-searches/RecentSearches';\r\n\r\nexport default function FunctionComponent() {\r\n\r\n    return (\r\n        <main className=\"soundcloud-main-container\">\r\n            <section className=\"grid-container\">\r\n                <TracksDashboard />\r\n                <TrackPlayer />\r\n                <RecentSearches />\r\n            </section>\r\n        </main>\r\n    )\r\n}\r\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport './styles/global.scss'\n\nimport SoundCloudMain from './pages/SoundCloudMain'\n\nfunction App() {\n  return (\n    <main>\n      <Switch className=\"App\">\n        <Route component={SoundCloudMain} exact path=\"/\"/>\n      </Switch>\n    </main>\n  );\n}\n\nexport default App;","import { createBrowserHistory } from \"history\";\r\nconst history = createBrowserHistory();\r\n\r\nexport default history;","const initialState = {\r\n    isLoading: false,\r\n    centerImgPos: null,\r\n    query: {\r\n        searchBy: '',\r\n        tracksPerPage: 6,\r\n        offset: 0\r\n    },\r\n    tracks: [],\r\n    recentSearches: [],\r\n    readRecentSearch: false,\r\n    currTrack: null\r\n}\r\n\r\nexport default function appReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'SET-IS-LOADING':\r\n            return {\r\n                ...state,\r\n                isLoading: action.status\r\n            }\r\n        case 'UPDATE-CENTER-IMG-POS':\r\n            return {\r\n                ...state,\r\n                centerImgPos: action.params\r\n            }\r\n        case 'UPDATE-QUERY':\r\n            return {\r\n                ...state,\r\n                query: { ...action.updatedQuery }\r\n            }\r\n        case 'SET-TRACKS':\r\n            return {\r\n                ...state,\r\n                tracks: [...action.data]\r\n            }\r\n        case 'CLEAR-TRACKS':\r\n            return {\r\n                ...state,\r\n                tracks: []\r\n            }\r\n        case 'UPDATE-RECENT_SEARCHES':\r\n            return {\r\n                ...state,\r\n                recentSearches: [...action.searches]\r\n            }\r\n        case 'CLEAR-RECENT-SEARCHES':\r\n            return {\r\n                ...state,\r\n                recentSearches: []\r\n            }\r\n        case 'CLEAR-CURR-TRACK':\r\n            return {\r\n                ...state,\r\n                currTrack: null\r\n            }\r\n        case 'SET-CURR-TRACK':\r\n            return {\r\n                ...state,\r\n                currTrack: { ...action.trackToSet }\r\n            }\r\n        case 'UPDATE-IS-RECENT-SEARCH':\r\n            return {\r\n                ...state,\r\n                readRecentSearch: action.val\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import {combineReducers} from 'redux';\r\nimport appReducer from './appReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n    appStore: appReducer\r\n    // Additional reducers can be added like so:\r\n    // appStore: appReducer,\r\n    // appReducer2: appReducer2\r\n})\r\n\r\nexport default rootReducer;","import {createStore, applyMiddleware, compose} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers'\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport const store = createStore(\r\n    rootReducer,\r\n    composeEnhancers(applyMiddleware(thunk))\r\n);\r\n\r\nexport default store;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { HashRouter as Router } from 'react-router-dom';\nimport history from './history.js'\nimport { store } from './store/store.js'\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}